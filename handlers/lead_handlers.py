from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
)
from config.states import (
    FIRST_MESSAGE,
    GET_NAME,
    GET_NUMBER,
    GET_EMAIL,
    GET_AGREEMENT,
    INLINE_BUTTON,
)
from handlers.jobs_handler import send_message_job
from datetime import timedelta
from db.user_crud import create_user, get_user, update_user
from db.tags_crud import set_tag, delete_tag
from logs.logger import logger
from config.config import ADMIN_ID
from handlers.admin_handler import admin_start

AGREEMENT_TEXT = (
    "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
    "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º. "
    '–ï—Å–ª–∏ –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ "–°–æ–≥–ª–∞—Å–µ–Ω".'
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == int(ADMIN_ID):
        return await admin_start(update, context)
    if not await get_user(update.effective_user.id):
        await create_user(update.effective_user.id, update.effective_user.username)
        logger.info("User has been created üìù")
        user = await get_user(update.effective_user.id)
        await set_tag(user[0], '–•–æ–ª–æ–¥–Ω—ã–π')
        logger.info("Tag has been setted üìù")

    keyboard = [["–î–∞", "–ù–µ—Ç"]]
    markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        input_field_placeholder="–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º?",
        resize_keyboard=True,
    )
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {update.effective_user.first_name}! –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –±—É–º–∞–≥–∞–º –º–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏?",
        reply_markup=markup,
    )
    job = context.job_queue.run_once(
        send_message_job,
        when=timedelta(hours=1),
        data={
            "message": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞"
        },
        name=f"send_message_job_{update.effective_user.username}",
        chat_id=update.effective_user.id,
    )
    context.user_data["job_name"] = job.name
    return FIRST_MESSAGE


async def get_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "job_name" in context.user_data:
        for jobs in context.job_queue.get_jobs_by_name(context.user_data["job_name"]):
            jobs.schedule_removal()
    answer = update.effective_message.text
    context.user_data["answer"] = answer
    keyboard = [[update.effective_user.first_name]]
    markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
        resize_keyboard=True,
    )
    if answer.strip().lower() == "–¥–∞":
        user = await get_user(update.effective_user.id)
        print(user[0])
        await delete_tag(user[0])
        await set_tag(user[0], '–û–±—ã—á–Ω—ã–π')
        logger.info("Tag has been changed ‚ÑπÔ∏è")
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ö–∞–∫ —è –º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º?",
            reply_markup=markup,
        )
        job = context.job_queue.run_once(
            send_message_job,
            when=timedelta(hours=1),
            data={
                "message": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞"
            },
            name=f"send_message_job_{update.effective_user.username}",
            chat_id=update.effective_user.id,
        )
        context.user_data["job_name"] = job.name
        return GET_NAME
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ",
        )
        return FIRST_MESSAGE


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "job_name" in context.user_data:
        for jobs in context.job_queue.get_jobs_by_name(context.user_data["job_name"]):
            jobs.schedule_removal()
    name = update.effective_message.text
    await update_user(update.effective_user.id, "name", name)
    context.user_data["name"] = name
    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
        resize_keyboard=True,
    )
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=f"{name}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏—Ñ–æ—Ä–º–∞—Ü–∏—é —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=markup,
    )
    job = context.job_queue.run_once(
        send_message_job,
        when=timedelta(hours=1),
        data={
            "message": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞"
        },
        name=f"send_message_job_{update.effective_user.username}",
        chat_id=update.effective_user.id,
    )
    context.user_data["job_name"] = job.name
    return GET_NUMBER


async def get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "job_name" in context.user_data:
        for jobs in context.job_queue.get_jobs_by_name(context.user_data["job_name"]):
            jobs.schedule_removal()
    phone = update.effective_message.contact.phone_number
    await update_user(update.effective_user.id, "phone", phone)
    context.user_data["phone_number"] = phone
    await context.bot.send_message(
        chat_id=update.effective_user.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    )
    job = context.job_queue.run_once(
        send_message_job,
        when=timedelta(hours=1),
        data={
            "message": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞"
        },
        name=f"send_message_job_{update.effective_user.username}",
        chat_id=update.effective_user.id,
    )
    context.user_data["job_name"] = job.name
    return GET_EMAIL


async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "job_name" in context.user_data:
        for jobs in context.job_queue.get_jobs_by_name(context.user_data["job_name"]):
            jobs.schedule_removal()
    email = update.effective_message.text
    await update_user(update.effective_user.id, "email", email)
    context.user_data["email"] = email
    keyboard = [["–°–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]]
    markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        input_field_placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:",
        resize_keyboard=True,
    )
    await context.bot.send_message(
        chat_id=update.effective_user.id, text=AGREEMENT_TEXT, reply_markup=markup
    )
    job = context.job_queue.run_once(
        send_message_job,
        when=timedelta(hours=1),
        data={
            "message": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞"
        },
        name=f"send_message_job_{update.effective_user.username}",
        chat_id=update.effective_user.id,
    )
    context.user_data["job_name"] = job.name
    return GET_AGREEMENT


async def get_agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "job_name" in context.user_data:
        for jobs in context.job_queue.get_jobs_by_name(context.user_data["job_name"]):
            jobs.schedule_removal()
    message = update.effective_message.text
    context.user_data["agreement"] = message
    keyboard = [
        [
            InlineKeyboardButton(
                "–ë–∞–∑–æ–≤—ã–π",
                callback_data="basic",
            ),
            InlineKeyboardButton(
                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
                callback_data="extended",
            ),
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if message.strip().lower() == "—Å–æ–≥–ª–∞—Å–µ–Ω":
        await update_user(update.effective_user.id, "agreement", 1)
        user = await get_user(update.effective_user.id)
        await delete_tag(user[0])
        await set_tag(user[0], '–ì–æ—Ä—è—á–∏–π')
        logger.info("Tag has been changed ‚ÑπÔ∏è")

        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω",
            reply_markup=markup,
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"{context.user_data}")
        job = context.job_queue.run_once(
            send_message_job,
            when=timedelta(hours=1),
            data={"message": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω"},
            name=f"send_message_job_{update.effective_user.username}",
            chat_id=update.effective_user.id,
        )
        context.user_data["job_name"] = job.name
        return INLINE_BUTTON
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≥–¥–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
        )
        return FIRST_MESSAGE


async def get_leads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "job_name" in context.user_data:
        for jobs in context.job_queue.get_jobs_by_name(context.user_data["job_name"]):
            jobs.schedule_removal()
    query = update.callback_query
    await query.answer()
    if query.data == "basic":
        keyboard = [
            [
                InlineKeyboardButton(
                    "–ü–ª–∞–Ω", url="https://parents-chew-q3e.craft.me/2PpY6OcIw0T5C4"
                ),
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–ü–æ–ª—É—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω —É–∂–µ —Å–µ–π—á–∞—Å",
            reply_markup=markup,
            parse_mode="MarkdownV2",
        )
    elif query.data == "extended":
        keyboard = [
            [
                InlineKeyboardButton(
                    "–ü–ª–∞–Ω", url="https://parents-chew-q3e.craft.me/S1Jj4dwYTEthRE"
                ),
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω —É–∂–µ —Å–µ–π—á–∞—Å",
            reply_markup=markup,
            parse_mode="MarkdownV2",
        )
