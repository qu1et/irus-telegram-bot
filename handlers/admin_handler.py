import csv
import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
)
from config.states import (
    ADMIN_PANEL,
    CONFIRM_MESSAGE,
    SPAM_MESSAGE,
)
from db.user_crud import get_users
from db.tags_crud import count_users_with_tag, get_list_by_tag
from logs.logger import logger


async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")],
        [
            InlineKeyboardButton(
                "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –ì–æ—Ä—è—á–∏–π", callback_data="hot_users_list"
            )
        ],
        [
            InlineKeyboardButton(
                "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –û–±—ã—á–Ω—ã–π",
                callback_data="common_users_list",
            )
        ],
        [
            InlineKeyboardButton(
                "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –•–æ–ª–æ–¥–Ω—ã–π", callback_data="cold_users_list"
            )
        ],
        [
            InlineKeyboardButton(
                "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π csv", callback_data="csv_users_list"
            )
        ],
        [
            InlineKeyboardButton(
                "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="get_stat"
            )
        ],
        [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send_message")],
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {update.effective_user.first_name}!",
        reply_markup=markup,
    )
    return ADMIN_PANEL


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_users()
    text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    text += "‚Ññ \- Username \- –ò–º—è \- –¢–µ–ª–µ—Ñ–æ–Ω \- Email\n"
    for i, user in enumerate(users, 1):
        phone = str(user[4] or "").replace("+", "\\+")
        text += f"{i}\. @{user[2]} \- {user[3]} \- {phone} \- {user[5]}\n"
    await context.bot.send_message(
        chat_id=update.effective_user.id, text=text, parse_mode="MarkdownV2"
    )
    await admin_start(update, context)


async def get_csv_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_users()
    with open("users.csv", "w") as file:
        writer = csv.writer(file)
        writer.writerow(["‚Ññ", "Username", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"])
        for i, user in enumerate(users, 1):
            writer.writerow([i, user[2], user[3], user[4], user[5]])

    await context.bot.send_document(
        chat_id=update.effective_user.id,
        document=open("users.csv", "rb"),
        caption="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    )
    await admin_start(update, context)


async def get_spam_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:"
    )
    return CONFIRM_MESSAGE


async def confirm_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message.text
    context.user_data["spam_message"] = message
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="no")],
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º. –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
    )
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=message,
        reply_markup=markup,
    )
    return SPAM_MESSAGE


async def spam_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    users = await get_users()
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∞–ª–∞—Å—å üöÄ")
    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user[1],
                text=context.user_data["spam_message"],
            )
            await asyncio.sleep(0.07)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[2]}: {e} ‚õî"
            )
            continue
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
    )
    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
    await admin_start(update, context)
    return ADMIN_PANEL


async def get_stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_users()
    hot_users = await count_users_with_tag("–ì–æ—Ä—è—á–∏–π")
    common_users = await count_users_with_tag("–û–±—ã—á–Ω—ã–π")
    cold_users = await count_users_with_tag("–•–æ–ª–æ–¥–Ω—ã–π")
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–ì–æ—Ä—è—á–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {hot_users[0]}\n–û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {common_users[0]}\n–•–æ–ª–æ–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cold_users[0]}",
    )
    await admin_start(update, context)


async def get_hot_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_list_by_tag("–ì–æ—Ä—è—á–∏–π")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –ì–æ—Ä—è—á–∏–π: {len(users)}")
    if users:
        text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –ì–æ—Ä—è—á–∏–π:\n"
        text += "‚Ññ \- Username \- –ò–º—è \- –¢–µ–ª–µ—Ñ–æ–Ω \- Email\n"
        for i, user in enumerate(users, 1):
            phone = str(user[4] or "").replace("+", "\\+")
            text += f"{i}\. @{user[2]} \- {user[3]} \- {phone} \- {user[5]}\n"
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=text,
            parse_mode="MarkdownV2",
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –ì–æ—Ä—è—á–∏–π –Ω–µ—Ç",
        )
    await admin_start(update, context)


async def get_common_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_list_by_tag("–û–±—ã—á–Ω—ã–π")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –û–±—ã—á–Ω—ã–π: {len(users)}")
    if users:
        text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –û–±—ã—á–Ω—ã–π:\n"
        text += "‚Ññ \- Username \- –ò–º—è \- –¢–µ–ª–µ—Ñ–æ–Ω \- Email\n"
        for i, user in enumerate(users, 1):
            phone = str(user[4] or "").replace("+", "\\+")
            text += f"{i}\. @{user[2]} \- {user[3]} \- {phone} \- {user[5]}\n"
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=text,
            parse_mode="MarkdownV2",
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –û–±—ã—á–Ω—ã–π –Ω–µ—Ç",
        )
    await admin_start(update, context)


async def get_cold_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_list_by_tag("–•–æ–ª–æ–¥–Ω—ã–π")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –•–æ–ª–æ–¥–Ω—ã–π: {len(users)}")
    if users:
        text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –•–æ–ª–æ–¥–Ω—ã–π:\n"
        text += "‚Ññ \- Username \- –ò–º—è \- –¢–µ–ª–µ—Ñ–æ–Ω \- Email\n"
        for i, user in enumerate(users, 1):
            phone = str(user[4] or "").replace("+", "\\+")
            text += f"{i}\. @{user[2]} \- {user[3]} \- {phone} \- {user[5]}\n"
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=text,
            parse_mode="MarkdownV2",
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º –•–æ–ª–æ–¥–Ω—ã–π –Ω–µ—Ç",
        )
    await admin_start(update, context)
